! Spec handler

This handler behaves in a similar way as ==EDAMMConfigurationCommandHandler==. It's responsibility is to read the spec file and make it available in the context for other handlers to use.

% ${changes:path=code/001-EDAMMSpecReaderCommandHandler.ombu}$
[[[classDefinition=true|lineNumber=true
TestCase subclass: #EDAMMSpecReaderCommandHandlerTest
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'EDA-Multimodule-Migration-Tests'
]]]

% ${changes:path=code/002-EDAMMSpecReaderCommandHandlerTest_testSpecCommandHandler.ombu}$
[[[classDefinition=true|lineNumber=true
{ #category : 'tests' }
EDAMMSpecReaderCommandHandlerTest >> testSpecCommandHandler
	| handler command context file entries |
	file := FileSystem workingDirectory / 'tests' / 'spec1.csv'.
	file asFileReference
		writeStreamDo: [ :stream |
			stream
				nextPutAll: 'EDA-Events';
				nextPut: $,;
				nextPutAll: 'EDAEventSourcingEvent';
				nextPut: $,;
				nextPutAll: 'pharo-eda-api';
				nextPut: $,;
				nextPutAll: 'EDAAPI-Events';
				nextPut: $,;
				nextPutAll: 'EDAEventSourcingEvent';
				nextPut: Character cr;
				nextPut: Character lf ].
	context := Dictionary new.
	command := Dictionary new
		add: 'spec file' -> file;
		yourself.
	handler := EDAMMSpecCommandHandler new.
	handler handleCommand: command within: context.
	self assert: (context includesKey: 'spec').
	entries := context at: 'spec'.
	self assert: entries isNotNil.
	self assert: (entries first includesKey: 'input package').
	self assert: (entries first at: 'input package') equals: 'EDA-Events'.
	self assert: (entries first includesKey: 'input class').
	self
		assert: (entries first at: 'input class')
		equals: 'EDAEventSourcingEvent'.
	self assert: (entries first includesKey: 'output module').
	self
		assert: (entries first at: 'output module')
		equals: 'pharo-eda-api'.
	self assert: (entries first includesKey: 'output package').
	self
		assert: (entries first at: 'output package')
		equals: 'EDAAPI-Events'.
	self assert: (entries first includesKey: 'output class').
	self
		assert: (entries first at: 'output class')
		equals: 'EDAEventSourcingEvent'
]]]

Pharo will ask us to create the new class right when we try to save the test itself.

% ${changes:path=code/003-EDAMMSpecCommandHandler.ombu}$
[[[classDefinition=true|lineNumber=true
EDAMMCommandHandler subclass: #EDAMMSpecCommandHandler
		instanceVariableNames: ''
		classVariableNames: ''
		category: 'EDA-Multimodule-Migration'
]]]

The ==handleCommand:within:== implementation is very similar to ==EDAMMConfigurationCommandHandler=='s:

% ${changes:path=code/004-EDAMMSpecCommandHandler_handleCommand_within_.ombu}$
[[[classDefinition=false|lineNumber=true
{ #category : 'command handling' }
EDAMMSpecCommandHandler >> handleCommand: aCommand within: aContext
	| result |
	result := false.
	(self inputValid: aCommand)
		ifTrue: [ | fileReference |
			fileReference := aCommand at: 'spec file'.
			aContext
				at: 'spec'
				put: (EDAMMSpecFile new readFile: fileReference) ]
		ifFalse: [ result := true ].
	^ result
]]]

As well as the ==inputValid:== implementation.

% ${changes:path=code/005-EDAMMSpecCommandHandler_inputValid_.ombu}$
[[[classDefinition=false|lineNumber=true
{ #category : 'command checking' }
EDAMMSpecCommandHandler >> inputValid: aCommand
	^ aCommand includesKey: 'spec file'
]]]

The test should pass.
